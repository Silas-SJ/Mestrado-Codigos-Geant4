//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
/// \file mpdCalorimeterSD.cc
/// \brief Implementation of the mpdCalorimeterSD class

#include "mpdCalorimeterSD.hh"
#include "G4HCofThisEvent.hh"
#include "G4Step.hh"
#include "G4ThreeVector.hh"
#include "G4SDManager.hh"
#include "G4ios.hh"
#include "G4SteppingManager.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

mpdCalorimeterSD::mpdCalorimeterSD(
                            const G4String& name, 
                            const G4String& hitsCollectionName,
                            G4int nofCells)
 : G4VSensitiveDetector(name),
   fHitsCollection(nullptr),
   fNofCells(nofCells)
{
  collectionName.insert(hitsCollectionName);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

mpdCalorimeterSD::~mpdCalorimeterSD()
{ 
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void mpdCalorimeterSD::Initialize(G4HCofThisEvent* hce)
{
  // Create hits collection
  fHitsCollection 
    = new mpdCalorHitsCollection(SensitiveDetectorName, collectionName[0]);

  // Add this collection in hce
  auto hcID 
    = G4SDManager::GetSDMpointer()->GetCollectionID(collectionName[0]);
  hce->AddHitsCollection( hcID, fHitsCollection ); 
   G4cout << "Passa mpdCalorimeterSD::initialize() "<< collectionName[0] << G4endl;
  // Create hits
  // fNofCells for cells + one more for total sums 
  for (G4int i=0; i<fNofCells+1; i++ ) {
//  for (G4int i=0; i<fNofCells; i++ ) {
    fHitsCollection->insert(new mpdCalorHit());
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

G4bool mpdCalorimeterSD::ProcessHits(G4Step* step,
                                     G4TouchableHistory*)
{  
  // energy deposit
   
  auto edep = step->GetTotalEnergyDeposit();
    
  // step length
  G4double stepLength = 0.;
  if ( step->GetTrack()->GetDefinition()->GetPDGCharge() == 0. ) return false;
    stepLength = step->GetStepLength();

 // if ( edep==0. && stepLength == 0. ) return false;

  auto touchable = (step->GetPreStepPoint()->GetTouchable());

  // Get calorimeter cell id 
  auto layerNumber = touchable->GetReplicaNumber(1);
  // Get hit accounting data for this cell
  auto hit = (*fHitsCollection)[layerNumber];
    
    if ( ! hit ) {
    G4ExceptionDescription msg;
    msg << "Cannot access hit " << layerNumber; 
    G4Exception("mpdCalorimeterSD::ProcessHits()",
      "MyCode0004", FatalException, msg);
    }

  // Get hit for total accounting
  auto hitTotal 
    = (*fHitsCollection)[fHitsCollection->entries()-1];
  auto piondecay = false;
  auto muondecay = false;
  auto pionpassed = false;
  auto muonpassed = false;
  G4int detNo = step->GetPreStepPoint()->GetTouchableHandle()->GetCopyNumber(1);
  if(abs(step->GetTrack()->GetDefinition()->GetPDGEncoding()) == 211){
   pionpassed = true;
   hit->SetPionTrackID(step->GetTrack()->GetTrackID());
   G4cout << "Pion TrackID: " << step->GetTrack()->GetTrackID() << "  detNo: " << detNo << "  layer: " << layerNumber << G4endl;
  }
  if(abs(step->GetTrack()->GetDefinition()->GetPDGEncoding()) == 13){
   muonpassed = true;
   hit->SetMuonTrackID(step->GetTrack()->GetTrackID());
   G4cout << "Muon TrackID: " << step->GetTrack()->GetTrackID() << "  detNo: " << detNo << "  layer: " << layerNumber << G4endl;
  }
  if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="Scintillation"&& abs(step->GetTrack()->GetDefinition()->GetPDGEncoding()) == 211){ // Decay -> Scintillation ????? 
      piondecay=true;
      std::cout << "pion decay at layer " << layerNumber << std::endl;
    }
  if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="Scintillation"&& abs(step->GetTrack()->GetDefinition()->GetPDGEncoding()) == 13){
      muondecay=true;
      std::cout << "muon decay at layer " << layerNumber << std::endl;
    }
  // Add values
 //if ( edep==0. && stepLength == 0.) return false;
    hit->Add(edep, stepLength, layerNumber);
    hitTotal->Add(edep, stepLength, layerNumber);
//    if(pionpassed) hit->SetPionTrackID(step->GetTrack()->GetTrackID());
//    if(muonpassed) hit->SetMuonTrackID(step->GetTrack()->GetTrackID());
    if(piondecay) hit->AddPionDecay();
    if(muondecay) hit->AddMuonDecay();

//    std::cout << "Particle: " << step->GetTrack()->GetDefinition()->GetParticleName()<< std::endl;
//    if(step->GetPreStepPoint()->GetProcessDefinedStep()&&step->GetPreStepPoint()->GetProcessDefinedStep()->GetProcessName()) std::cout << "PreStep Process: " << step->GetPreStepPoint()->GetProcessDefinedStep()->GetProcessName() << std::endl;
//    std::cout << "PostStep Process: " << step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName() << std::endl;
    if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="Decay"){
        std::cout << "decay at layer " << layerNumber << "  particle: " << step->GetTrack()->GetDefinition()->GetParticleName() << std::endl;
    }
/*    if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="Decay"&& abs(step->GetTrack()->GetDefinition()->GetPDGEncoding()) == 211){
        std::cout << "pion decay at layer " << layerNumber << std::endl;
    }
    if (step->GetPostStepPoint()->GetProcessDefinedStep()->GetProcessName()=="Decay"&& abs(step->GetTrack()->GetDefinition()->GetPDGEncoding()) == 13){
        std::cout << "muon decay at layer " << layerNumber << std::endl;
    }
 */
  return true;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

void mpdCalorimeterSD::EndOfEvent(G4HCofThisEvent*)
{
  if ( verboseLevel>1 ) { 
     auto nofHits = fHitsCollection->entries();
     G4cout
       << G4endl 
       << "-------->Hits Collection: in this event they are " << nofHits 
       << " hits in the tracker chambers: " << G4endl;
     for ( std::size_t i=0; i<nofHits; ++i ) (*fHitsCollection)[i]->Print();
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
